import type { NextPage } from "next";
import Head from "next/head";
import FeedCard from "../components/feedCard";
import useSWR from "swr";
import { PropsWithChildren, useEffect, useRef, useState } from "react";
import HeaderSection from "../components/headerSection";
import UserSearchButton from "../components/userSearchButton";
import { useRouter } from "next/router";
import { Utilities } from "../services/utilities";
import { KudosBrowserService } from "../services/kudosBrowserService";
import Scrollable from "../components/scrollable";
import { ListKudosResponse } from "../models/ListKudosResponse";
import { SearchKudosByUserResponse } from "./api/kudos/search";

interface Props extends PropsWithChildren<{}> {}
interface QueryParams {
  search?: string;
}

let loadingNextPage = false;

const Feed: NextPage<Props> = () => {
  const router = useRouter();

  const queryParams = router.query as QueryParams;
  const searchQueryParam = queryParams.search || "";

  const [kudosResponse, setKudosResponse] = useState(
    undefined as ListKudosResponse | undefined
  );
  const [searchDisplayMessageState, setSearchDisplayMessage] = useState(
    undefined as string | undefined
  );
  const [nextToken, setNextToken] = useState(
    undefined as string | null | undefined
  );

  const firstUpdate = useRef(!searchQueryParam);

  const [searchQuery, setSearchQuery] = useState(searchQueryParam);

  const getKudosNextPage = async () => {
    if (loadingNextPage || !nextToken) return;
    loadingNextPage = true;

    const nextKudos = searchQuery
      ? await KudosBrowserService.searchKudos(searchQuery, nextToken)
      : await KudosBrowserService.getKudos(nextToken);
    const updatedResponse: ListKudosResponse = {
      response: { __typename: "ModelKudoConnection", items: [] },
    };
    if (nextKudos.result && kudosResponse?.result && updatedResponse.response) {
      const mergedItems = kudosResponse.result.concat(nextKudos.result);
      updatedResponse.result = mergedItems;
      updatedResponse.response.items = mergedItems;
      updatedResponse.response.nextToken = nextKudos.response?.nextToken;
    }

    setKudosResponse(updatedResponse);

    loadingNextPage = false;
    return updatedResponse;
  };

  useEffect(() => {
    if (!searchQuery) return;
    firstUpdate.current = true;
    setSearchQuery(searchQuery);
  }, [searchQuery]);

  useEffect(() => {
    if (kudosResponse?.result?.length === 0) {
      setSearchDisplayMessage("No kudos found.");
    }
    setNextToken(kudosResponse?.response?.nextToken);
  }, [kudosResponse]);

  let url = Utilities.API.kudosUrlRelative;
  let fetcher = async (url: string): Promise<ListKudosResponse> => {
    if (firstUpdate.current) {
      console.log("Loading most recent kudos...");
      firstUpdate.current = false;
      const response = await KudosBrowserService.getKudosFetcher(
        url,
        setKudosResponse
      );
      return response;
    } else {
      return Promise.resolve({});
    }
  };

  if (searchQuery) {
    const searchParams = new URLSearchParams({
      username: searchQuery,
    });
    url = Utilities.API.kudosSearchUrlRelative + "?" + searchParams.toString();
    fetcher = async (url: string): Promise<SearchKudosByUserResponse> => {
      if (firstUpdate.current) {
        console.log(`Searching for kudos (query="${searchQuery}")...`);
        firstUpdate.current = false;
        return await KudosBrowserService.searchKudosFetcher(
          url,
          setKudosResponse
        );
      } else {
        return Promise.resolve({});
      }
    };
  }

  const listKudosResponse = useSWR<
    ListKudosResponse | SearchKudosByUserResponse,
    any
  >(url, fetcher);

  if (listKudosResponse.error) return <div>Failed to load</div>;
  if (!kudosResponse) return <div>Loading...</div>;

  return (
    <>
      <Head>
        <title>slashkudos</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <HeaderSection title="Recent kudos" />
      <UserSearchButton
        searchQuery={searchQuery}
        dispatchers={{
          setSearchQueryDispatcher: setSearchQuery,
          setSearchDisplayMessageDispatcher: setSearchDisplayMessage,
          setResultDispatcher: setKudosResponse,
        }}
      ></UserSearchButton>
      <Scrollable onScrollBottom={getKudosNextPage}>
        <div className="max-w-7xl mx-auto py-6 sm:px-6 lg:px-8">
          {kudosResponse?.result?.map((kudo, i) => {
            if (!kudo) return <></>;
            return <FeedCard key={i} kudo={kudo}></FeedCard>;
          })}
          {searchDisplayMessageState}
        </div>
      </Scrollable>
    </>
  );
};

export default Feed;
